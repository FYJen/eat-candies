import pygame
import random
from math import floor, ceil


from config import *

def createBlock(blockType, blockX=False, blockY=False, status='FALL',
                 width=blockSize, height=blockSize):
    """Generate new block of objects.

    Args:
        blockType - Type of the block, including 'REG', 'HEART', 'VACUM', and
                    'MOVEMENTBOOST'.
        blockX - X coordinate for the block.
        blockY - Y coordinate for the block.
        status - The status of the block. It can be either 'FALL' or 'VACUM'.
                 Default is 'FALL'.
        width - The width length of the block.
        height - The height of the block.

    Returns:
        A dictionary with block info.
    """
    if blockX == False and blockY == False:
        return {'rect': pygame.Rect(random.randint(10, W_WIDTH - blockSize), 0, width, height),
                'type': blockType,
                'status': status }
    else:
        return {'rect': pygame.Rect(blockX, blockY, width, height),
                'type': blockType,
                'status': status }

def follow(block, player):
    """
    """
    if block.centerx < player.centerx:
        if block.centery <= player.centery:
            block.centerx += ceil((player.centerx - block.centerx) / FOLLOWSPEED)
            block.centery += ceil((player.centery - block.centery) / FOLLOWSPEED)
        else:
            block.centerx += \
                ceil((player.centerx - block.centerx) / FOLLOWSPEED) + 1
            block.centery -= \
                ceil((block.centery - player.centery) / FOLLOWSPEED) + 1
    else:
        if block.centery <= player.centery:
            block.centerx -= ceil((block.centerx - player.centerx) / FOLLOWSPEED)
            block.centery += ceil((player.centery - block.centery) / FOLLOWSPEED)
        else:
            block.centerx -= \
                ceil((block.centerx - player.centerx) / FOLLOWSPEED) + 1
            block.centery -= \
                ceil((block.centery - player.centery) / FOLLOWSPEED) + 1

def resetEffect(curEffect):
    """Reset the effect and set it back to normal.

    Args:
        curEffect - Current effect.
    """
    global VACUM
    global MOVESPEED
    curEffect['Effect'] = None
    curEffect['time'] = 0
    VACUM = False
    MOVESPEED = ORIMOVESPEED

def checkEffect(curEffect):
    """Check the timestamp on the current effect. The effect will get reset to
    normal if the current time is greater than the timestamp. Timestamp on the
    effect is generated by adding EFFECTTIME and the time when the effect starts.
    """
    if curEffect['Effect'] and \
            floor(pygame.time.get_ticks() / 1000) > curEffect['time']:
        resetEffect(curEffect)